{ lib, pkgs }:
let
  # Import sub-configs
  pluginsConfig = import ./plugins { inherit lib pkgs; };
  settingsConfig = import ./settings.nix { inherit lib; };

  # Merge settings from core config plus plugin-provided fragments.
  settings = lib.recursiveUpdate settingsConfig.generalSettings pluginsConfig.pluginSettings;

  pluginNames = builtins.attrNames pluginsConfig.plugins;
  pluginsLua = lib.generators.toLua {
    multiline = true;
    indent = "  ";
  } pluginNames;

  inherit (pluginsConfig) pluginSetupOptions;
  pluginOptsLua =
    if pluginSetupOptions == { } then
      "{}"
    else
      lib.generators.toLua {
        multiline = true;
        indent = "  ";
      } pluginSetupOptions;

  initLua = lib.concatStringsSep "\n" [
    "-- Generated by Nix; do not edit manually."
    "local plugins = ${pluginsLua}"
    ""
    "local plugin_opts = ${pluginOptsLua}"
    ""
    "for _, plugin_name in ipairs(plugins) do"
    "  local ok, plugin = pcall(require, plugin_name)"
    "  if ok and plugin.setup then"
    "    plugin:setup(plugin_opts[plugin_name] or {})"
    "  end"
    "end"
    ""
  ];

  mergeKeymapSets =
    lhs: rhs:
    if lhs == null then
      rhs
    else if rhs == null then
      lhs
    else if lib.isList lhs && lib.isList rhs then
      lhs ++ rhs
    else if lib.isAttrs lhs && lib.isAttrs rhs then
      let
        keys = lib.unique ((builtins.attrNames lhs) ++ (builtins.attrNames rhs));
      in
      lib.genAttrs keys (
        key: mergeKeymapSets (lib.attrByPath [ key ] null lhs) (lib.attrByPath [ key ] null rhs)
      )
    else
      rhs;

  keymap = mergeKeymapSets settingsConfig.generalKeymap pluginsConfig.pluginKeymap;

  # Extra packages include shared tools plus plugin-specific needs.
  extraPackages = lib.unique (
    (with pkgs; [
      mediainfo
      ffmpeg
    ])
    ++ pluginsConfig.pluginExtraPackages
  );
in
{
  inherit settings keymap initLua;
  inherit (pluginsConfig) plugins;
  inherit extraPackages;
}
